---
layout: base.pug
stylesheet: /style/political-parties.css
eleventyComputed:
    description: "Want to know whether political parties in #{watchId} actually support their statements? Now you can. Complete with articles."
---
mixin tagbutton(type, id, title=false)
    - if (!title) { title = id };
    button(name=type, value=id).tag=title

-
    const relevantParties = AFAWatchpigeonParties.filter(party => party.areas.includes(watchId));
    const relevantPartyIds = relevantParties.map((party) => party.id)
    const relevantArticles = AFAWatchpigeonArticles.filter(article => article.responses.find((response) => relevantPartyIds.includes(response.party.id)));
    const points = {};
    const relatedArticles = [];
    // Filter out parties with no configuration
    //filterParties((party)=> {return party == null});

    relevantArticles.forEach((article, articleId) => {
        article.responses.forEach((response) => {
            const partyId = response.party.id;
            if (!Object.hasOwn(points, partyId)) {
                points[partyId] = 0;
            }
            points[partyId] += response.score;
        });
    });

main
    h1 
        a(href="/watchpigeon/") Watchpigeon
        span &nbsp;-&nbsp;#{watchId}
    section#scale
        h2 Scale
                //each party in relevantParties
                    - 
                        let px;
                        let value;
                        if (party.points >= 0) {
                            //console.log(party.points)
                            //console.log(maxScale[party.id])
                            //console.log(party.name)
                            value = party.points / maxScale[party.id] * 100  //50 - (100/maxScale - party.points)

                            from = classname == "desktop" ? "right" : "bottom";
                        } else {
                            let points = party.points * -1;
                            value = points / maxScale[party.id] * 100;  //50 - (100/maxScale - party.points)
                            from = classname == "desktop" ? "left" : "top";
                            //left = party.points / maxScale * 100  //50 - (100/maxScale - party.points)
                            //left = 50 + (100/maxScale - points)

                        }
                        
                    if party.name
                        //svg.party(style="left: " + left + "%")
                        img.party(title=party.name style=from + ": " + value + "%" src=`/assets/watchpigeon/${party.id}.svg` alt=`${party.name} logo`)

    section
        h2 Scoring system
        p Dependant on whether the party is in line with our values, the score will be added or subtracted.
        ul
            //each score in Object.keys(watchpigeon.scale)
                li +/-#{score}:
                    ul
                        each description in watchpigeon.scale[score]
                            li=description



        h2 Considered articles

        fieldset#tags
            legend Tags


            each subject in AFAWatchpigeonSubjects
                +tagbutton("subject", subject.id, subject.name)
            
            each party in relevantParties
                +tagbutton("party", party.id, party.name)



        section#articles
            each article in relevantArticles
                -
                    const involvedPartyIds = article.responses.map(response => response.party.id)
                    const involvedParties = relevantParties.filter((party) => involvedPartyIds.includes(party.id));
                    const involvedSubjects = article.subjects.map(subject => subject.AFAWatchpigeonSubjects_id)
                    const allTags =involvedParties.map(party => party.id).concat(involvedSubjects.map(subject => subject.id)).join(",");
                article(data-tags=allTags)
                    h3 #{article.title} #{article.year}
                    if article.note
                        p Note: #{article.note}

                    h4 Party scores
                    ul
                        each party in involvedParties
                            - const response = article.responses.find(response => response.party.id == party.id);
                            +tagbutton("party", party.id, `${party.name}: ${response.score}, ${response.note}`)

                    h4 Tags
                    ul
                        each subject in involvedSubjects
                            +tagbutton("subject", subject.id, subject.name)
                    
                    - if (!Array.isArray(article.url))
                        a(href=article.url)=article.url
                    - else
                        ul
                            each url in article.url
                                li
                                    a(href=url)=url

    script(src="/scripts/political-parties.js")